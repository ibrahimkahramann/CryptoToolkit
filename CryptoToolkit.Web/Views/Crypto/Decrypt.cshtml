@model dynamic
@{
    ViewData["Title"] = "Şifre Çözme";
}

<div class="min-h-screen bg-[#111922] text-white px-4 py-8">
    <div class="max-w-4xl mx-auto">
        <!-- Header -->
        <div class="text-center mb-8">
            <h1 class="text-4xl font-bold mb-2">Şifre Çözme</h1>
            <p class="text-gray-400">Şifrelenmiş verilerinizi doğru anahtarlarla çözün</p>
        </div>

        <div class="bg-[#1a2532] rounded-xl p-6 shadow-xl">
            <!-- Form Header -->
            <div class="flex items-center mb-6 pb-4 border-b border-gray-700">
                <div class="w-12 h-12 bg-green-500 rounded-lg flex items-center justify-center mr-4">
                    <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 16 16">
                        <path d="M8 1a2 2 0 0 1 2 2v4H6V3a2 2 0 0 1 2-2zm3 6V3a3 3 0 0 0-6 0v4a2 2 0 0 0-2 2v5a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2z"/>
                    </svg>
                </div>
                <div>
                    <h2 class="text-xl font-semibold">Şifre Çözme</h2>
                    <p class="text-gray-400">Şifreli metinleri çözün</p>
                </div>
            </div>            <!-- Error Display -->
            @* <!-- Error Display -->
            @if (!ViewData.ModelState.IsValid)
            {
                <div class="bg-red-500/10 border border-red-500 rounded-lg p-4 mb-6">
                    <ul class="list-disc list-inside text-red-400">
                        @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                        {
                            <li>@error.ErrorMessage</li>
                        }
                    </ul>
                </div>
            } *@

            <!-- Data Transfer Notification -->
            @if (!string.IsNullOrEmpty(Context.Request.Query["cipherText"]))
            {                <div class="bg-green-500/10 border border-green-500 rounded-lg p-4 mb-6">
                    <div class="flex items-center text-green-400">
                        <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 16 16">
                            <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>
                        </svg>
                        <span>Şifreleme sayfasından veri aktarımı başarılı!</span>
                    </div>
                </div>}

            <!-- Debug Info - REMOVED -->

            <form asp-action="Decrypt" method="post" class="space-y-6">
                <input type="hidden" name="method" value="AES" />
                <!-- Algorithm Selection - REMOVED -->
                <!-- Encrypted Text -->                <div>
                    <label for="cipherText" class="block text-sm font-medium text-gray-300 mb-2">Şifreli Metin</label>
                    <div class="relative">
                        <textarea class="w-full bg-[#243447] border border-gray-600 rounded-lg px-4 py-3 text-white placeholder-gray-400 focus:border-blue-400 focus:outline-none resize-none" 
                                id="cipherText" name="cipherText" rows="4" 
                                placeholder="Çözmek istediğiniz şifreli metni buraya yapıştırın..." required>@(Context.Request.Query["cipherText"].Count > 0 ? Uri.UnescapeDataString(Context.Request.Query["cipherText"].ToString()) : "")</textarea>
                    </div>
                </div>
                <!-- AES Fields -->
                <div id="aesFields" class="space-y-4"> <!-- Ensure this is always visible, no 'hidden' class -->
                    <div class="bg-yellow-500/10 border border-yellow-500/30 rounded-lg p-4">
                        <h3 class="text-lg font-medium text-yellow-400 mb-4 flex items-center">
                            <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 16 16">
                                <!-- SVG Path for AES icon or similar -->
                                <path d="M8 1a2 2 0 0 1 2 2v4H6V3a2 2 0 0 1 2-2zm3 6V3a3 3 0 0 0-6 0v4a2 2 0 0 0-2 2v5a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2zM5 9h6v5H5V9z"/>
                            </svg>
                            AES Anahtarları
                        </h3>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">                            <div>
                                <label for="key" class="block text-sm font-medium text-gray-300 mb-2">AES Anahtarı</label>
                                <input type="text" id="key" name="key"
                                       class="w-full bg-[#243447] border border-gray-600 rounded-lg px-4 py-3 text-white placeholder-gray-400 focus:border-blue-400 focus:outline-none"
                                       value="@(Context.Request.Query["key"].Count > 0 ? Uri.UnescapeDataString(Context.Request.Query["key"].ToString()) : "")"
                                       placeholder="AES Anahtarını buraya girin..." required />
                            </div>
                            <div>
                                <label for="iv" class="block text-sm font-medium text-gray-300 mb-2">Başlatma Vektörü (IV)</label>
                                <input type="text" id="iv" name="iv"
                                       class="w-full bg-[#243447] border border-gray-600 rounded-lg px-4 py-3 text-white placeholder-gray-400 focus:border-blue-400 focus:outline-none"
                                       value="@(Context.Request.Query["iv"].Count > 0 ? Uri.UnescapeDataString(Context.Request.Query["iv"].ToString()) : "")"
                                       placeholder="Başlatma Vektörünü (IV) buraya girin..." required />
                            </div>
                        </div>
                    </div>
                </div>

                <!-- RSA Fields - REMOVED -->
                <!-- Action Buttons -->
                <div class="flex justify-between items-center pt-6">
                    <a asp-controller="Crypto" asp-action="Encrypt" class="inline-flex items-center px-4 py-2 border border-gray-600 rounded-lg text-gray-300 hover:text-white hover:border-gray-500 transition-colors duration-200">
                        <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 16 16">
                            <path fill-rule="evenodd" d="M1 8a.5.5 0 0 1 .5-.5h11.793l-3.147-3.146a.5.5 0 0 1 .708-.708l4 4a.5.5 0 0 1 0 .708l-4 4a.5.5 0 0 1-.708-.708L13.293 8.5H1.5A.5.5 0 0 1 1 8z"/>
                        </svg>
                        Şifreleme
                    </a>
                    <button type="submit" id="decrypt-button" class="inline-flex items-center px-6 py-3 bg-green-600 hover:bg-green-700 text-white font-medium rounded-lg transition-colors duration-200">
                        <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 16 16">
                            <path d="M8 1a2 2 0 0 1 2 2v4H6V3a2 2 0 0 1 2-2zm3 6V3a3 3 0 0 0-6 0v4a2 2 0 0 0-2 2v5a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2z"/>
                        </svg>
                        Şifreyi Çöz
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Result Modal -->
@if (Model != null && Model?.PlainText != null)
{
    <div id="modal-backdrop" class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
        <div id="result-modal" class="bg-[#1a2532] w-full max-w-4xl rounded-xl shadow-2xl">
            <div class="bg-green-600 px-6 py-4 flex items-center justify-between rounded-t-xl">
                <h3 class="text-lg font-medium text-white flex items-center">
                    <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 16 16">
                        <path d="M8 1a2 2 0 0 1 2 2v4H6V3a2 2 0 0 1 2-2zm3 6V3a3 3 0 0 0-6 0v4a2 2 0 0 0-2 2v5a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2z"/>
                    </svg>
                    Şifre Çözme Başarılı
                </h3>
                <button id="close-modal-btn" class="text-white hover:text-gray-300 transition-colors">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
            
            <!-- Modal Content -->
            <div class="p-6 text-white max-h-[calc(100vh-200px)] overflow-y-auto">
                <div class="mb-6">
                    <div class="flex items-center gap-2 mb-3 text-blue-400">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 256 256">
                            <path d="M208,40H48A16,16,0,0,0,32,56v58.78c0,89.61,75.82,119.34,91,124.39a15.53,15.53,0,0,0,10,0c15.2-5.05,91-34.78,91-124.39V56A16,16,0,0,0,208,40Zm0,74.79c0,78.42-66.35,104.62-80,109.18-13.53-4.51-80-30.69-80-109.18V56H208ZM82.34,141.66a8,8,0,0,1,11.32-11.32L112,148.69l50.34-50.35A8,8,0,0,1,173.66,98.34Z"></path>
                        </svg>
                        <h5 class="text-white font-medium">Çözülen Metin</h5>
                    </div>
                    <div class="relative bg-[#243447] p-4 rounded-lg border border-[#344b65]">
                        <pre class="text-white text-sm whitespace-pre-wrap break-words">@Model?.PlainText</pre>
                        <button class="absolute top-2 right-2 bg-blue-600/90 hover:bg-blue-700 text-white px-3 py-1 rounded text-sm flex items-center gap-1 copy-btn" 
                                data-text="@Model?.PlainText?.Replace("'", "\\'") ?? """>
                            <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 256 256">
                                <path d="M216,32H88a8,8,0,0,0-8,8V80H40a8,8,0,0,0-8,8V216a8,8,0,0,0,8,8H168a8,8,0,0,0,8-8V176h40a8,8,0,0,0,8-8V40A8,8,0,0,0,216,32ZM160,208H48V96H160Zm48-48H176V88a8,8,0,0,0-8-8H96V48H208Z"></path>
                            </svg>
                            Kopyala
                        </button>
                    </div>
                </div>
            </div>
            
            <!-- Modal Footer -->
            <div class="p-6 bg-[#243447] border-t border-[#344b65] flex items-center justify-end rounded-b-xl">
                <button type="button" id="close-modal-btn2" class="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-lg transition-colors flex items-center gap-2">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 256 256">
                        <path d="M205.66,194.34a8,8,0,0,1-11.32,11.32L128,139.31,61.66,205.66a8,8,0,0,1-11.32-11.32L116.69,128,50.34,61.66A8,8,0,0,1,61.66,50.34L128,116.69l66.34-66.35a8,8,0,0,1,11.32,11.32L139.31,128Z"></path>
                    </svg>
                    Kapat
                </button>
            </div>
        </div>
    </div>
}

<script>
document.addEventListener('DOMContentLoaded', function() {
    const urlParams = new URLSearchParams(window.location.search);
    console.log('Initial URL params for Decrypt page:', window.location.search);

    const cipherTextField = document.getElementById('cipherText');
    if (urlParams.has('cipherText')) {
        const cipherTextValueFromUrl = decodeURIComponent(urlParams.get('cipherText') || '');
        // console.log('URL parameter "cipherText": "' + (cipherTextValueFromUrl ? cipherTextValueFromUrl.substring(0,100) + '...' : 'EMPTY_STRING') + '"');
        if (cipherTextField) {
            // console.log('Cipher Text (Razor): cipherTextField.value (server-rendered): "' + (cipherTextField.value ? cipherTextField.value.substring(0,100) + '...' : 'EMPTY_STRING') + '"');
            if (!cipherTextField.value && cipherTextValueFromUrl) {
                 // console.log('JS is setting cipherText from URL param as Razor value is empty.');
                 cipherTextField.value = cipherTextValueFromUrl;
            }
        } else {
            console.error('cipherText field not found');
        }
    }
    
    // console.log('AES method is active. Populating AES fields if necessary.');

    const keyField = document.getElementById('key');
    if (urlParams.has('key')) {
        const keyValueFromUrl = decodeURIComponent(urlParams.get('key') || '');
        // console.log('URL parameter "key" for AES: "' + keyValueFromUrl + '"');
        if (keyField) {
            // console.log('AES Key (Razor): keyField.value (server-rendered): "' + keyField.value + '"');
            if (!keyField.value && keyValueFromUrl) {
                // console.log('JS is setting AES Key from URL param as Razor value is empty.');
                keyField.value = keyValueFromUrl;
            }
            // console.log('AES Key (Final): keyField.value after JS logic: "' + keyField.value + '"');
        } else {
            console.error('AES key field (id=key) not found');
        }
    } else {
        if (keyField && keyField.value !== undefined) keyField.value = ''; 
    }

    const ivField = document.getElementById('iv');
    if (urlParams.has('iv')) {
        const ivValueFromUrl = decodeURIComponent(urlParams.get('iv') || '');
        if (ivField) {
            if (!ivField.value && ivValueFromUrl) {
                ivField.value = ivValueFromUrl;
            }
        } else {
            console.error('AES IV field (id=iv) not found');
        }
    } else {
        if (ivField && ivField.value !== undefined) ivField.value = '';
    }
    
    if (urlParams.has('cipherText') && urlParams.get('cipherText') &&
        urlParams.has('key') && urlParams.get('key') &&
        urlParams.has('iv') && urlParams.get('iv')) {
        
        const decryptButton = document.getElementById('decrypt-button');
        if (decryptButton) {
            decryptButton.classList.add('animate-pulse', 'bg-green-500', 'ring-2', 'ring-green-300');
            
            const parentDiv = decryptButton.parentNode;
            if (parentDiv && !parentDiv.querySelector('.decrypt-hint-text')) {
                const hintText = document.createElement('span');
                hintText.className = 'text-green-400 text-sm block mt-2 text-right decrypt-hint-text';
                hintText.innerHTML = 'Şifreleme sayfasından aktarılan veriyi çözmek için tıklayın';
                parentDiv.appendChild(hintText);
            }
            
            setTimeout(() => {
                decryptButton.classList.remove('animate-pulse');
            }, 5000);
        }
    }
    
    const modalBackdrop = document.getElementById('modal-backdrop');
    const resultModal = document.getElementById('result-modal');

    function closeModal() {
        const mb = document.getElementById('modal-backdrop');
        if (mb) {
            mb.style.display = 'none';
            document.body.style.overflow = 'auto';
        }
    }

    if (modalBackdrop) { 
        document.body.style.overflow = 'hidden'; 

        const closeButtons = document.querySelectorAll('#close-modal-btn, #close-modal-btn2');
        closeButtons.forEach(button => {
            button.addEventListener('click', closeModal);
        });
        
        modalBackdrop.addEventListener('click', function(e) {
            if (resultModal && !resultModal.contains(e.target) && e.target === modalBackdrop) {
                closeModal();
            }
        });
        
        document.addEventListener('keydown', function(e) {
            if (e.key === "Escape") {
                closeModal();
            }
        });
    }
    
    const copyButtons = document.querySelectorAll('.copy-btn');
    copyButtons.forEach(button => {
        button.addEventListener('click', function() {
            const textToCopy = this.dataset.text;
            if (textToCopy === undefined || textToCopy === null) {
                console.error('No text to copy.');
                return;
            }
            navigator.clipboard.writeText(textToCopy).then(() => {
                const originalButtonHtml = this.innerHTML;
                this.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 256 256"><path d="m101.66,141.66,72-72a8,8,0,0,0-11.32-11.32L96,124.69,75.31,104a8,8,0,0,0-11.32,11.32l24,24A8,8,0,0,0,101.66,141.66ZM232,128A104,104,0,1,1,128,24,104.11,104.11,0,0,1,232,128Zm-16,0a88,88,0,1,0-88,88A88.1,88.1,0,0,0,216,128Z"></path></svg> Kopyalandı!';
                this.disabled = true;
                setTimeout(() => {
                    this.innerHTML = originalButtonHtml;
                    this.disabled = false;
                }, 2000);
            }).catch(err => {
                console.error('Kopyalama başarısız oldu: ', err);
                const originalButtonHtml = this.innerHTML;
                this.innerHTML = 'Hata!';
                this.disabled = true;
                setTimeout(() => {
                    this.innerHTML = originalButtonHtml;
                    this.disabled = false;
                }, 2000);
            });
        });
    });
});
</script>
